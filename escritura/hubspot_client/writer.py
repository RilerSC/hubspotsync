# hubspot_client/writer.py
"""
Cliente para escribir datos en HubSpot usando la API oficial v3
"""
import time
from typing import List, Dict, Any, Optional, Tuple
from hubspot import HubSpot
from hubspot.crm.contacts import SimplePublicObjectInput, BatchInputSimplePublicObjectBatchInputForCreate
from hubspot.crm.contacts.exceptions import ApiException

from config.settings import settings
from utils.logger import get_logger
from .field_mapper import HubSpotFieldMapper
from .field_mapper_insert import HubSpotInsertFieldMapper

class HubSpotWriter:
    """Cliente para escribir contactos en HubSpot"""
    
    def __init__(self, dry_run: bool = False):
        self.logger = get_logger('hubspot_sync.api')
        self.hubspot_client = HubSpot(access_token=settings.HUBSPOT_TOKEN)
        self.field_mapper = HubSpotFieldMapper()  # Para UPDATE
        self.insert_field_mapper = HubSpotInsertFieldMapper()  # Para INSERT
        self.batch_size = min(settings.BATCH_SIZE, 100)  # HubSpot limita a 100 por batch
        self.dry_run = dry_run  # Modo de prueba sin escribir datos
        
        if self.dry_run:
            self.logger.info("üß™ MODO DRY-RUN ACTIVADO - No se escribir√°n datos reales")
        
    def test_connection(self) -> bool:
        """
        Prueba la conexi√≥n con HubSpot
        
        Returns:
            True si la conexi√≥n es exitosa
        """
        try:
            self.logger.info("üß™ Probando conexi√≥n con HubSpot...")
            
            # Intentar obtener informaci√≥n b√°sica de la cuenta
            response = self.hubspot_client.crm.contacts.basic_api.get_page(limit=1)
            
            self.logger.info("‚úÖ Conexi√≥n con HubSpot exitosa")
            return True
            
        except ApiException as e:
            self.logger.error(f"‚ùå Error de API de HubSpot: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error al conectar con HubSpot: {str(e)}")
            return False
    
    def contact_exists(self, cedula: str) -> Optional[str]:
        """
        Verifica si un contacto existe en HubSpot por n√∫mero de c√©dula
        
        Args:
            cedula: N√∫mero de c√©dula del contacto
            
        Returns:
            ID del contacto si existe, None si no existe
        """
        try:
            # En modo dry-run, simular b√∫squeda (siempre devolver None para simular contactos nuevos)
            if self.dry_run:
                # Simular que algunos contactos existen (los que terminan en n√∫meros pares)
                exists = cedula and len(cedula) > 0 and cedula[-1] in ['0', '2', '4', '6', '8']
                if exists:
                    fake_id = f"existing_{cedula}"
                    self.logger.debug(f"üß™ [DRY-RUN] Contacto simulado como existente - C√©dula: {cedula}")
                    return fake_id
                else:
                    self.logger.debug(f"üß™ [DRY-RUN] Contacto simulado como nuevo - C√©dula: {cedula}")
                    return None
            
            # Buscar contacto por c√©dula usando la API de b√∫squeda
            search_request = {
                "filterGroups": [
                    {
                        "filters": [
                            {
                                "propertyName": "no__de_cedula",
                                "operator": "EQ",
                                "value": cedula
                            }
                        ]
                    }
                ],
                "limit": 1
            }
            
            response = self.hubspot_client.crm.contacts.search_api.do_search(
                public_object_search_request=search_request
            )
            
            if response.results:
                contact_id = response.results[0].id
                self.logger.debug(f"Contacto encontrado con c√©dula {cedula}: ID {contact_id}")
                return contact_id
            
            return None
            
        except ApiException as e:
            if e.status == 404:
                return None
            self.logger.error(f"Error al buscar contacto con c√©dula {cedula}: {e}")
            return None
        except Exception as e:
            self.logger.error(f"Error inesperado al buscar contacto {cedula}: {str(e)}")
            return None
    
    def find_contact_by_cedula(self, cedula: str):
        """
        Busca y retorna el contacto completo por n√∫mero de c√©dula
        
        Args:
            cedula: N√∫mero de c√©dula del contacto
            
        Returns:
            Objeto contacto de HubSpot si existe, None si no existe
        """
        try:
            if self.dry_run:
                self.logger.debug(f"üß™ [DRY-RUN] B√∫squeda simulada - C√©dula: {cedula}")
                return None
            
            # Buscar contacto por c√©dula usando la API de b√∫squeda
            from hubspot.crm.contacts import PublicObjectSearchRequest, Filter, FilterGroup
            
            # Lista completa de propiedades a solicitar (incluyendo todas las personalizadas)
            all_properties = [
                # Propiedades b√°sicas
                "firstname", "lastname", "email", "numero_asociado", "no__de_cedula", "work_email",
                # Propiedades de estado
                "estado_del_asociado", "hubspot_owner_id", 
                # Propiedades de ahorros
                "con_ahorro", "con_ahorro_economias", "con_ahorro_navideno", "con_plan_fin_de_ano",
                "con_ahorro_fondo_de_inversion", "con_ahorro_plan_vacacional", "con_ahorro_plan_aguinaldo",
                "con_ahorro_plan_bono_escolar", "con_ahorro_con_proposito", "con_ahorro_plan_futuro",
                # Propiedades de cr√©ditos
                "con_credito", "con_cred__capital_social", "con_cred__adelanto_de_pension",
                "con_cred__consumo_personal", "con_cred__salud", "con_cred__especial_al_vencimiento",
                "con_cred__facilito", "con_cred__refundicion_de_pasivos", "con_cred_vivienda_patrimonial",
                "con_cred__capitalizable_3", "con_cred__tecnologico", "con_credifacil",
                "con_cred__vivienda_cooperativa", "con_cred__multiuso", "con_cred__deuda_unica",
                "con_cred__vivienda_constructivo", "con_cred__vehiculo_nuevos", "con_cred__back_to_back",
                # Propiedades de seguros
                "con_seguro", "con_seg__apoyo_funerario", "con_seg__su_vida", "con_poliza_colectiva", "con_cesantia"
            ]
            
            search_request = PublicObjectSearchRequest(
                filter_groups=[
                    FilterGroup(
                        filters=[
                            Filter(
                                property_name="no__de_cedula",
                                operator="EQ",
                                value=cedula
                            )
                        ]
                    )
                ],
                properties=all_properties,
                limit=1
            )
            
            # Ejecutar b√∫squeda
            search_response = self.hubspot_client.crm.contacts.search_api.do_search(
                public_object_search_request=search_request
            )
            
            if search_response.results and len(search_response.results) > 0:
                contact = search_response.results[0]
                self.logger.info(f"‚úÖ Contacto encontrado - C√©dula: {cedula}, ID: {contact.id}")
                return contact
            else:
                self.logger.info(f"‚ùå Contacto no encontrado - C√©dula: {cedula}")
                return None
                
        except Exception as e:
            self.logger.error(f"Error buscando contacto por c√©dula {cedula}: {e}")
            return None
    
    def create_contact(self, contact_data: Dict[str, Any]) -> Optional[str]:
        """
        Crea un nuevo contacto en HubSpot
        
        Args:
            contact_data: Datos del contacto desde SQL Server
            
        Returns:
            ID del contacto creado o None si fall√≥
        """
        try:
            # Mapear datos a formato HubSpot
            hubspot_properties = self.field_mapper.map_contact_data(contact_data)
            
            if not hubspot_properties.get('no__de_cedula'):
                self.logger.warning(f"Contacto sin c√©dula v√°lida, omitiendo: {contact_data}")
                return None
            
            # En modo dry-run, solo simular la creaci√≥n
            if self.dry_run:
                cedula = hubspot_properties.get('no__de_cedula')
                fake_contact_id = f"dry_run_{cedula}"
                self.logger.info(f"üß™ [DRY-RUN] Contacto que se crear√≠a - C√©dula: {cedula}, Campos: {len(hubspot_properties)}")
                self.logger.debug(f"üß™ [DRY-RUN] Propiedades: {hubspot_properties}")
                return fake_contact_id
            
            # Crear objeto de entrada para HubSpot
            simple_public_object_input = SimplePublicObjectInput(properties=hubspot_properties)
            
            # Crear contacto
            response = self.hubspot_client.crm.contacts.basic_api.create(
                simple_public_object_input=simple_public_object_input
            )
            
            contact_id = response.id
            cedula = hubspot_properties.get('no__de_cedula')
            
            self.logger.info(f"‚úÖ Contacto creado - C√©dula: {cedula}, ID: {contact_id}")
            return contact_id
            
        except ApiException as e:
            self.logger.error(f"‚ùå Error de API al crear contacto: {e}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå Error inesperado al crear contacto: {str(e)}")
            return None
    
    def update_contact(self, contact_id: str, contact_data: Dict[str, Any], already_mapped: bool = False, force_all_properties: bool = True) -> bool:
        """
        Actualiza un contacto existente en HubSpot
        
        Args:
            contact_id: ID del contacto en HubSpot
            contact_data: Datos del contacto (SQL o ya mapeados a HubSpot)
            already_mapped: Si True, los datos ya est√°n mapeados a formato HubSpot
            force_all_properties: Si True, fuerza la asignaci√≥n de TODAS las propiedades personalizadas
            
        Returns:
            True si la actualizaci√≥n fue exitosa
        """
        try:
            # Mapear datos a formato HubSpot solo si no est√°n ya mapeados
            if already_mapped:
                hubspot_properties = contact_data.copy()
            else:
                hubspot_properties = self.field_mapper.map_contact_data(contact_data)
            
            # NUEVA FUNCIONALIDAD: Forzar asignaci√≥n de todas las propiedades personalizadas
            if force_all_properties:
                hubspot_properties = self._ensure_all_custom_properties(hubspot_properties)
            
            # En modo dry-run, solo simular la actualizaci√≥n
            if self.dry_run:
                cedula = hubspot_properties.get('no__de_cedula', 'N/A')
                self.logger.info(f"üß™ [DRY-RUN] Contacto que se actualizar√≠a - C√©dula: {cedula}, ID: {contact_id}, Campos: {len(hubspot_properties)}")
                self.logger.debug(f"üß™ [DRY-RUN] Propiedades: {hubspot_properties}")
                return True
            
            # Log detallado de lo que se va a enviar
            cedula = hubspot_properties.get('no__de_cedula', 'N/A')
            self.logger.info(f"üîÑ Actualizando contacto - C√©dula: {cedula}, ID: {contact_id}, Propiedades: {len(hubspot_properties)}")
            self.logger.debug(f"üìù Propiedades a enviar: {hubspot_properties}")
            
            # Crear objeto de entrada para actualizaci√≥n
            simple_public_object_input = SimplePublicObjectInput(properties=hubspot_properties)
            
            # Actualizar contacto
            response = self.hubspot_client.crm.contacts.basic_api.update(
                contact_id=contact_id,
                simple_public_object_input=simple_public_object_input
            )
            
            self.logger.info(f"‚úÖ Contacto actualizado - C√©dula: {cedula}, ID: {contact_id}")
            return True
            
        except ApiException as e:
            self.logger.error(f"‚ùå Error de API al actualizar contacto {contact_id}: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error inesperado al actualizar contacto {contact_id}: {str(e)}")
            return False
    
    def create_contacts_batch(self, contacts_data: List[Dict[str, Any]]) -> Tuple[int, int]:
        """
        Crea m√∫ltiples contactos en lote
        
        Args:
            contacts_data: Lista de datos de contactos
            
        Returns:
            Tupla (exitosos, fallidos)
        """
        if not contacts_data:
            return 0, 0
        
        self.logger.info(f"üîÑ Creando lote de {len(contacts_data)} contactos...")
        
        # Preparar datos para batch
        batch_inputs = []
        for contact_data in contacts_data:
            hubspot_properties = self.field_mapper.map_contact_data(contact_data)
            
            # Solo incluir contactos con c√©dula v√°lida
            if hubspot_properties.get('no__de_cedula'):
                batch_input = SimplePublicObjectInput(properties=hubspot_properties)
                batch_inputs.append(batch_input)
        
        if not batch_inputs:
            self.logger.warning("‚ùå No hay contactos v√°lidos para crear en lote")
            return 0, len(contacts_data)
        
        # En modo dry-run, solo simular la creaci√≥n en lote
        if self.dry_run:
            self.logger.info(f"üß™ [DRY-RUN] Lote que se crear√≠a - Contactos v√°lidos: {len(batch_inputs)}")
            for i, batch_input in enumerate(batch_inputs[:3]):  # Mostrar solo los primeros 3 como ejemplo
                self.logger.debug(f"üß™ [DRY-RUN] Contacto {i+1}: {batch_input.properties}")
            if len(batch_inputs) > 3:
                self.logger.debug(f"üß™ [DRY-RUN] ... y {len(batch_inputs) - 3} contactos m√°s")
            return len(batch_inputs), 0
        
        try:
            # Crear lote
            batch_input_request = BatchInputSimplePublicObjectBatchInputForCreate(inputs=batch_inputs)
            response = self.hubspot_client.crm.contacts.batch_api.create(
                batch_input_simple_public_object_batch_input_for_create=batch_input_request
            )
            
            successful = len(response.results) if response.results else 0
            failed = len(batch_inputs) - successful
            
            self.logger.info(f"‚úÖ Lote completado - Exitosos: {successful}, Fallidos: {failed}")
            return successful, failed
            
        except ApiException as e:
            self.logger.error(f"‚ùå Error de API en creaci√≥n por lotes: {e}")
            return 0, len(batch_inputs)
        except Exception as e:
            self.logger.error(f"‚ùå Error inesperado en creaci√≥n por lotes: {str(e)}")
            return 0, len(batch_inputs)
    
    def process_inserts(self, insert_data: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        Procesa todos los datos de INSERT usando la estrategia exitosa
        NUEVA L√ìGICA: Verifica contacto por contacto si existe en HubSpot antes de crear
        
        Args:
            insert_data: Lista de contactos para insertar desde SQL Server
            
        Returns:
            Diccionario con estad√≠sticas de la operaci√≥n
        """
        total_contacts = len(insert_data)
        self.logger.info(f"üöÄ Iniciando proceso de INSERT para {total_contacts} contactos")
        self.logger.info("üìù Usando estrategia: verificar existencia individual + crear solo nuevos")
        
        stats = {
            'total': total_contacts,
            'processed': 0,
            'created': 0,
            'already_exists': 0,
            'invalid': 0,
            'errors': 0,
            'error_details': []
        }
        
        # Procesar contacto por contacto para verificaci√≥n precisa
        for i, contact_data in enumerate(insert_data, 1):
            cedula = str(contact_data.get('no__de_cedula', 'N/A'))
            
            self.logger.info(f"üîç Verificando {i}/{total_contacts}: C√©dula {cedula}")
            
            try:
                # 1. Validar que tiene c√©dula
                if not cedula or cedula == 'N/A':
                    stats['invalid'] += 1
                    error_msg = f"Contacto sin c√©dula v√°lida"
                    stats['error_details'].append(f"Registro {i}: {error_msg}")
                    self.logger.warning(f"   ‚ùå {error_msg}")
                    continue
                
                # 2. Mapear datos usando INSERT mapper
                hubspot_properties = self.insert_field_mapper.map_contact_data(contact_data)
                
                if not hubspot_properties:
                    stats['invalid'] += 1
                    error_msg = f"No se pudieron mapear datos para c√©dula {cedula}"
                    stats['error_details'].append(error_msg)
                    self.logger.warning(f"   ‚ùå {error_msg}")
                    continue
                
                # 3. Verificar si YA EXISTE en HubSpot (CLAVE DE LA SEPARACI√ìN)
                existing_contact = self.find_contact_by_cedula(cedula)
                
                if existing_contact:
                    stats['already_exists'] += 1
                    self.logger.info(f"   ‚ö†Ô∏è Contacto {cedula} YA EXISTE en HubSpot (ID: {existing_contact.id}) - Omitiendo INSERT")
                    continue
                
                # 4. NO EXISTE ‚Üí Crear nuevo contacto
                self.logger.debug(f"   üìù Creando nuevo contacto con {len(hubspot_properties)} propiedades")
                
                success = self._create_single_contact(hubspot_properties)
                
                if success:
                    stats['created'] += 1
                    self.logger.info(f"   ‚úÖ Contacto {cedula} creado exitosamente")
                else:
                    stats['errors'] += 1
                    error_msg = f"Fall√≥ la creaci√≥n del contacto {cedula}"
                    stats['error_details'].append(error_msg)
                    self.logger.warning(f"   ‚ùå {error_msg}")
                
            except Exception as e:
                stats['errors'] += 1
                error_msg = f"Error procesando contacto {cedula}: {str(e)}"
                stats['error_details'].append(error_msg)
                self.logger.error(f"   ‚ùå {error_msg}")
            
            stats['processed'] += 1
            
            # Peque√±a pausa entre contactos para no sobrecargar la API
            if not self.dry_run and i < total_contacts:
                time.sleep(0.2)  # Pausa m√°s larga para INSERT (m√°s conservador)
            
            # Log de progreso cada 10 contactos
            if i % 10 == 0:
                creation_rate = (stats['created'] / stats['processed']) * 100 if stats['processed'] > 0 else 0
                self.logger.info(f"üìä Progreso: {i}/{total_contacts} procesados, {stats['created']} creados ({creation_rate:.1f}%)")
        
        # Estad√≠sticas finales
        creation_rate = (stats['created'] / stats['processed']) * 100 if stats['processed'] > 0 else 0
        
        self.logger.info("üéâ Proceso INSERT completado:")
        self.logger.info(f"   üìä Total procesados: {stats['processed']}")
        self.logger.info(f"   ‚úÖ Contactos creados: {stats['created']}")
        self.logger.info(f"   ‚ö†Ô∏è Ya exist√≠an: {stats['already_exists']}")
        self.logger.info(f"   ‚ùå Inv√°lidos: {stats['invalid']}")
        self.logger.info(f"   ‚ùå Errores: {stats['errors']}")
        self.logger.info(f"   üìà Tasa de creaci√≥n: {creation_rate:.1f}%")
        
        # Log de primeros errores si los hay
        if stats['error_details']:
            self.logger.warning(f"‚ö†Ô∏è Primeros errores encontrados:")
            for error in stats['error_details'][:5]:
                self.logger.warning(f"   {error}")
            if len(stats['error_details']) > 5:
                self.logger.warning(f"   ... y {len(stats['error_details']) - 5} errores m√°s")
        
        return stats
    
    def _create_single_contact(self, hubspot_properties: Dict[str, Any]) -> bool:
        """
        Crea un solo contacto en HubSpot
        
        Args:
            hubspot_properties: Propiedades ya mapeadas para HubSpot
            
        Returns:
            True si la creaci√≥n fue exitosa
        """
        try:
            cedula = hubspot_properties.get('no__de_cedula', 'N/A')
            
            # En modo dry-run, solo simular la creaci√≥n
            if self.dry_run:
                self.logger.info(f"üß™ [DRY-RUN] Contacto que se crear√≠a - C√©dula: {cedula}, Campos: {len(hubspot_properties)}")
                self.logger.debug(f"üß™ [DRY-RUN] Propiedades: {hubspot_properties}")
                return True
            
            # Log detallado de lo que se va a enviar
            self.logger.debug(f"üìù Creando contacto - C√©dula: {cedula}, Propiedades: {len(hubspot_properties)}")
            self.logger.debug(f"üìù Propiedades a enviar: {hubspot_properties}")
            
            # Crear objeto de entrada para HubSpot
            simple_public_object_input = SimplePublicObjectInput(properties=hubspot_properties)
            
            # Crear contacto usando el par√°metro correcto
            response = self.hubspot_client.crm.contacts.basic_api.create(
                simple_public_object_input_for_create=simple_public_object_input
            )
            
            contact_id = response.id
            self.logger.info(f"‚úÖ Contacto creado - C√©dula: {cedula}, ID: {contact_id}")
            return True
            
        except ApiException as e:
            self.logger.error(f"‚ùå Error de API al crear contacto: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error inesperado al crear contacto: {str(e)}")
            return False
    
    def _create_single_contact_with_exceptions(self, hubspot_properties: Dict[str, Any]) -> bool:
        """
        Crea un solo contacto en HubSpot PROPAGANDO LAS EXCEPCIONES
        Para uso en scripts que necesitan manejar errores espec√≠ficos como 409 (conflictos)
        
        Args:
            hubspot_properties: Propiedades ya mapeadas para HubSpot
            
        Returns:
            True si la creaci√≥n fue exitosa
            
        Raises:
            ApiException: Errores de la API de HubSpot (incluye 409 conflicts)
            Exception: Otros errores inesperados
        """
        cedula = hubspot_properties.get('no__de_cedula', 'N/A')
        
        # En modo dry-run, solo simular la creaci√≥n
        if self.dry_run:
            self.logger.info(f"üß™ [DRY-RUN] Contacto que se crear√≠a - C√©dula: {cedula}, Campos: {len(hubspot_properties)}")
            self.logger.debug(f"üß™ [DRY-RUN] Propiedades: {hubspot_properties}")
            return True
        
        # Log detallado de lo que se va a enviar
        self.logger.debug(f"üìù Creando contacto - C√©dula: {cedula}, Propiedades: {len(hubspot_properties)}")
        self.logger.debug(f"üìù Propiedades a enviar: {hubspot_properties}")
        
        # Crear objeto de entrada para HubSpot
        simple_public_object_input = SimplePublicObjectInput(properties=hubspot_properties)
        
        # Crear contacto usando el par√°metro correcto
        # NOTA: Las excepciones se propagan intencionalmente para manejo espec√≠fico
        response = self.hubspot_client.crm.contacts.basic_api.create(
            simple_public_object_input_for_create=simple_public_object_input
        )
        
        contact_id = response.id
        self.logger.info(f"‚úÖ Contacto creado - C√©dula: {cedula}, ID: {contact_id}")
        return True
    
    def process_updates(self, update_data: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        Procesa todos los datos de UPDATE
        
        Args:
            update_data: Lista de contactos para actualizar
            
        Returns:
            Diccionario con estad√≠sticas de la operaci√≥n
        """
        total_contacts = len(update_data)
        self.logger.info(f"üîÑ Iniciando proceso de UPDATE para {total_contacts} contactos")
        
        stats = {
            'total': total_contacts,
            'processed': 0,
            'updated': 0,
            'not_found': 0,
            'errors': 0
        }
        
        for i, contact_data in enumerate(update_data, 1):
            cedula = contact_data.get('no__de_cedula')
            
            if not cedula:
                stats['errors'] += 1
                self.logger.warning(f"Contacto {i} sin c√©dula, omitiendo")
                continue
            
            # Limpiar c√©dula
            clean_cedula = self.field_mapper._clean_cedula(str(cedula))
            if not clean_cedula:
                stats['errors'] += 1
                self.logger.warning(f"C√©dula inv√°lida en contacto {i}: {cedula}")
                continue
            
            # Verificar si el contacto existe
            contact_id = self.contact_exists(clean_cedula)
            
            if contact_id:
                # Actualizar contacto existente
                if self.update_contact(contact_id, contact_data):
                    stats['updated'] += 1
                else:
                    stats['errors'] += 1
            else:
                stats['not_found'] += 1
                self.logger.debug(f"Contacto no encontrado para actualizar - C√©dula: {clean_cedula}")
            
            stats['processed'] += 1
            
            # Progreso cada 100 contactos
            if i % 100 == 0:
                self.logger.info(f"üìä Progreso UPDATE: {i}/{total_contacts} ({stats})")
            
            # Pausa para respetar rate limits
            time.sleep(0.05)
        
        self.logger.info(f"‚úÖ Proceso UPDATE completado: {stats}")
        return stats
    
    def _ensure_all_custom_properties(self, hubspot_properties: Dict[str, Any]) -> Dict[str, Any]:
        """
        Asegura que TODAS las propiedades personalizadas est√©n incluidas en la actualizaci√≥n.
        Para propiedades no presentes, asigna valores por defecto para forzar su creaci√≥n.
        
        Args:
            hubspot_properties: Propiedades actuales a enviar
            
        Returns:
            Diccionario con todas las propiedades personalizadas incluidas
        """
        # LISTA COMPLETA de propiedades personalizadas que manejamos
        all_custom_properties = {
            # Propiedades boolean (checkbox) - valor por defecto 'false'
            'con_ahorro': 'false',
            'con_ahorro_economias': 'false', 
            'con_ahorro_navideno': 'false',
            'con_plan_fin_de_ano': 'false',
            'con_ahorro_fondo_de_inversion': 'false',
            'con_ahorro_plan_vacacional': 'false',
            'con_ahorro_plan_aguinaldo': 'false',
            'con_ahorro_plan_bono_escolar': 'false',
            'con_ahorro_con_proposito': 'false',
            'con_ahorro_plan_futuro': 'false',
            'con_credito': 'false',
            'con_cred__capital_social': 'false',
            'con_cred__adelanto_de_pension': 'false',
            'con_cred__consumo_personal': 'false',
            'con_cred__salud': 'false',
            'con_cred__especial_al_vencimiento': 'false',
            'con_cred__facilito': 'false',
            'con_cred__refundicion_de_pasivos': 'false',
            'con_cred_vivienda_patrimonial': 'false',
            'con_cred__capitalizable_3': 'false',
            'con_cred__tecnologico': 'false',
            'con_credifacil': 'false',
            'con_cred__vivienda_cooperativa': 'false',
            'con_cred__multiuso': 'false',
            'con_cred__deuda_unica': 'false',
            'con_cred__vivienda_constructivo': 'false',
            'con_cred__vehiculo_nuevos': 'false',
            'con_cred__back_to_back': 'false',
            'con_seguro': 'false',
            'con_seg__apoyo_funerario': 'false',
            'con_seg__su_vida': 'false',
            'con_poliza_colectiva': 'false',
            'con_cesantia': 'false',
            
            # Propiedades select - valor por defecto None (se omiten si no tienen valor)
            'estado_del_asociado': None,
            'hubspot_owner_id': None,
            
            # Propiedades de texto/email - valor por defecto None
            'work_email': None,
        }
        
        # Crear copia de las propiedades actuales
        complete_properties = hubspot_properties.copy()
        
        # Agregar propiedades faltantes con valores por defecto
        added_properties = []
        for prop_name, default_value in all_custom_properties.items():
            if prop_name not in complete_properties and default_value is not None:
                complete_properties[prop_name] = default_value
                added_properties.append(prop_name)
        
        # Log de propiedades agregadas
        if added_properties:
            self.logger.debug(f"üîß Propiedades agregadas con valores por defecto: {added_properties}")
        
        self.logger.debug(f"üìù Total propiedades finales: {len(complete_properties)} (originales: {len(hubspot_properties)}, agregadas: {len(added_properties)})")
        
        return complete_properties
    
    def process_updates(self, update_data: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        Procesa todos los datos de UPDATE usando la estrategia exitosa
        BASADO EXACTAMENTE EN EL C√ìDIGO QUE FUNCION√ì en test_cedula_110100747.py
        
        Args:
            update_data: Lista de contactos para actualizar desde SQL Server
            
        Returns:
            Diccionario con estad√≠sticas de la operaci√≥n
        """
        total_contacts = len(update_data)
        self.logger.info(f"üöÄ Iniciando proceso de UPDATE para {total_contacts} contactos")
        self.logger.info("üìù Usando estrategia EXITOSA con force_all_properties=True")
        
        stats = {
            'total': total_contacts,
            'processed': 0,
            'updated': 0,
            'not_found': 0,
            'errors': 0,
            'error_details': []
        }
        
        # Procesar contacto por contacto (m√°s seguro para actualizaciones cr√≠ticas)
        for i, contact_data in enumerate(update_data, 1):
            cedula = str(contact_data.get('no__de_cedula', 'N/A'))
            
            self.logger.info(f"üîÑ Procesando {i}/{total_contacts}: C√©dula {cedula}")
            
            try:
                # 1. Mapear datos (MISMO PROCESO QUE FUNCION√ì)
                hubspot_properties = self.field_mapper.map_contact_data(contact_data)
                
                if not hubspot_properties:
                    stats['errors'] += 1
                    error_msg = f"No se pudieron mapear datos para c√©dula {cedula}"
                    stats['error_details'].append(error_msg)
                    self.logger.warning(f"   ‚ùå {error_msg}")
                    continue
                
                # 2. Buscar contacto en HubSpot (MISMO PROCESO QUE FUNCION√ì)
                contact = self.find_contact_by_cedula(cedula)
                
                if not contact:
                    stats['not_found'] += 1
                    self.logger.warning(f"   ‚ùå Contacto no encontrado en HubSpot para c√©dula {cedula}")
                    continue
                
                # 3. Actualizar CON FORZADO DE PROPIEDADES (LA CLAVE DEL √âXITO)
                self.logger.debug(f"   üìù Actualizando contacto ID: {contact.id} con {len(hubspot_properties)} propiedades")
                
                success = self.update_contact(
                    contact.id, 
                    hubspot_properties, 
                    already_mapped=True,
                    force_all_properties=True  # ESTO ES LO QUE FUNCION√ì AL 100%
                )
                
                if success:
                    stats['updated'] += 1
                    self.logger.info(f"   ‚úÖ Contacto {cedula} actualizado exitosamente")
                else:
                    stats['errors'] += 1
                    error_msg = f"Fall√≥ la actualizaci√≥n del contacto {cedula} (ID: {contact.id})"
                    stats['error_details'].append(error_msg)
                    self.logger.warning(f"   ‚ùå {error_msg}")
                
            except Exception as e:
                stats['errors'] += 1
                error_msg = f"Error procesando contacto {cedula}: {str(e)}"
                stats['error_details'].append(error_msg)
                self.logger.error(f"   ‚ùå {error_msg}")
            
            stats['processed'] += 1
            
            # Peque√±a pausa entre contactos para no sobrecargar la API
            if not self.dry_run and i < total_contacts:
                time.sleep(0.1)
            
            # Log de progreso cada 10 contactos
            if i % 10 == 0:
                success_rate = (stats['updated'] / stats['processed']) * 100 if stats['processed'] > 0 else 0
                self.logger.info(f"üìä Progreso: {i}/{total_contacts} procesados, {stats['updated']} exitosos ({success_rate:.1f}%)")
        
        # Estad√≠sticas finales
        success_rate = (stats['updated'] / stats['processed']) * 100 if stats['processed'] > 0 else 0
        
        self.logger.info("üéâ Proceso UPDATE completado:")
        self.logger.info(f"   üìä Total procesados: {stats['processed']}")
        self.logger.info(f"   ‚úÖ Actualizaciones exitosas: {stats['updated']}")
        self.logger.info(f"   ‚ùå No encontrados: {stats['not_found']}")
        self.logger.info(f"   ‚ùå Errores: {stats['errors']}")
        self.logger.info(f"   üìà Tasa de √©xito: {success_rate:.1f}%")
        
        # Log de primeros errores si los hay
        if stats['error_details']:
            self.logger.warning(f"‚ö†Ô∏è Primeros errores encontrados:")
            for error in stats['error_details'][:5]:
                self.logger.warning(f"   {error}")
            if len(stats['error_details']) > 5:
                self.logger.warning(f"   ... y {len(stats['error_details']) - 5} errores m√°s")
        
        return stats
